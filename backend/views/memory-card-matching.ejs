<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Object Recall Game</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">

    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f9f9f9;
            margin: 0;
            padding: 20px;
        }

        .game-container {
            max-width: 800px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.9);
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            text-align: center;
        }

        .instructions {
            font-size: 18px;
            background: #d1e7dd;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
        }

        .grid-container {
            display: grid;
            grid-template-columns: repeat(4, 80px);
            gap: 10px;
            justify-content: center;
            margin-bottom: 20px;
        }

        .grid-item {
            width: 80px;
            height: 80px;
            background-color: #e0f7fa;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 2em;
            border-radius: 10px;
            cursor: pointer;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .timer {
            font-size: 24px;
            margin-top: 20px;
        }

        .drag-container {
            margin-top: 30px;
            display: flex;
            justify-content: center;
            gap: 10px;
            overflow-x: auto;
        }

        .drag-item {
            width: 80px;
            height: 80px;
            background-color: #e0f7fa;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 2em;
            border-radius: 10px;
            cursor: pointer;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            user-select: none;
        }

        .check-btn {
            margin-top: 20px;
            font-size: 18px;
        }

        .result {
            margin-top: 30px;
            font-size: 20px;
            font-weight: bold;
        }

        .game-over {
            color: red;
            font-size: 22px;
            margin-top: 30px;
        }

        .instructions {
            font-size: 20px;
            background: #d1e7dd;
            padding: 25px;
            border-radius: 15px;
            margin-bottom: 25px;
            font-weight: bold;
            text-align: left;
            line-height: 1.5;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }

        .instructions h1 {
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 10px;
            color: #007bff;
        }

        .instructions p {
            margin: 10px 0;
            color: #333;
        }
    </style>
</head>
<body>

<div class="game-container">
    <h1>Object Recall Game</h1>

    <div class="instructions">
        <h1>How to Play:</h1>
        <p>In this memory game, pictures (emojis) are displayed on a grid for a limited time during which you try to
            memorize the location of each picture. When the timer stops, the pictures automatically disappear from
            the grid and are displayed below it. Your task is to drag and drop the pictures back to their original
            positions. 
            <br>When you feel confident, click the "CHECK" button to see your result.</p>
    </div>

    <div class="timer" id="timer">Time left: 30s</div>

    <div class="grid-container" id="grid-container"></div>

    <div class="drag-container" id="drag-container" style="display:none;"></div>

    <button class="btn btn-primary check-btn" id="checkBtn" style="display:none;">CHECK</button>

    <div class="result" id="result" style="display:none;"></div>

    <div class="game-over" id="gameOver" style="display:none;">Game Over! You took too long!</div>
</div>

<!-- Bootstrap JS, Popper.js, and jQuery -->
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.min.js"></script>

<script>
    const emojis = ["🍎", "🍌", "🍍", "🍒", "🍇", "🥑", "🍓", "🍉"];
    let gridItems = [];
    let draggedItem = null;
    let timer = 30; // 30 seconds for memorizing
    let fillTimer = 60; // 1 minute to fill the items
    let timerInterval;
    let fillTimerInterval;
    let gameStarted = false;
    let correctPositions = [];
    let originalPositions = [];

    // Create and shuffle emojis for grid
    function createGrid() {
        let shuffledEmojis = shuffle([...emojis, ...emojis]);
        const gridContainer = document.getElementById("grid-container");

        shuffledEmojis.forEach((emoji, index) => {
            const gridItem = document.createElement("div");
            gridItem.classList.add("grid-item");
            gridItem.setAttribute("data-index", index);
            gridItem.addEventListener("dragover", handleDragOver);
            gridItem.addEventListener("drop", handleDrop);
            gridItem.addEventListener("dragend", handleDragEnd);
            gridItems.push(gridItem);
            gridContainer.appendChild(gridItem);

            // Store the original positions
            originalPositions.push(emoji);
        });

        const dragContainer = document.getElementById("drag-container");
        shuffledEmojis.forEach(emoji => {
            const dragItem = document.createElement("div");
            dragItem.classList.add("drag-item");
            dragItem.textContent = emoji;
            dragItem.setAttribute("draggable", "true");
            dragItem.addEventListener("dragstart", handleDragStart);
            dragContainer.appendChild(dragItem);
        });
    }

    // Shuffle function for emojis
    function shuffle(array) {
        return array.sort(() => Math.random() - 0.5);
    }

    // Drag start event
    function handleDragStart(e) {
        draggedItem = e.target;
        setTimeout(() => {
            draggedItem.classList.add("dragging");
        }, 0);
    }

    // Drag over event
    function handleDragOver(e) {
        e.preventDefault();
        const target = e.target;

        if (target.classList.contains("grid-item")) {
            target.style.border = "2px solid #00f";
        }
    }

    // Drop event
    function handleDrop(e) {
        const target = e.target;
        if (target.classList.contains("grid-item") && draggedItem !== target) {
            target.style.border = "";
            const tempEmoji = target.textContent;
            target.textContent = draggedItem.textContent;
            draggedItem.textContent = tempEmoji;

            const targetIndex = target.getAttribute("data-index");
            const draggedIndex = draggedItem.getAttribute("data-index");

            // Swap positions in the original array
            const tempOriginal = originalPositions[targetIndex];
            originalPositions[targetIndex] = originalPositions[draggedIndex];
            originalPositions[draggedIndex] = tempOriginal;
        }
    }

    // Drag end event
    function handleDragEnd(e) {
        e.target.classList.remove("dragging");
    }

    // Timer countdown for the initial 30 seconds
    function startTimer() {
        timerInterval = setInterval(() => {
            document.getElementById("timer").textContent = `Time left: ${timer}s`;
            if (timer <= 0) {
                clearInterval(timerInterval);
                hideEmojis();
                startFillTimer();
            }
            timer--;
        }, 1000);
    }

    // Start the 1-minute timer for filling the items
    function startFillTimer() {
        fillTimerInterval = setInterval(() => {
            document.getElementById("timer").textContent = `Time left to place items: ${fillTimer}s`;
            if (fillTimer <= 0) {
                clearInterval(fillTimerInterval);
                checkResult();
            }
            fillTimer--;
        }, 1000);
    }

    // Hide emojis after 30 seconds
    function hideEmojis() {
        const gridContainer = document.getElementById("grid-container");
        gridContainer.innerHTML = ''; // Remove emojis from grid
        document.getElementById("drag-container").style.display = "flex";
        document.getElementById("checkBtn").style.display = "inline-block";
    }

    // Start the game
    function startGame() {
        gameStarted = true;
        document.getElementById("gameOver").style.display = "none";
        createGrid();
        startTimer();
    }

    // Check the result
    function checkResult() {
        let score = 0;
        gridItems.forEach((item, index) => {
            if (item.textContent === originalPositions[index]) {
                score++;
            }
        });
        if (score === originalPositions.length) {
            document.getElementById("result").textContent = "Congratulations! You have successfully recalled all objects!";
        } else {
            document.getElementById("result").textContent = `Oops! Some objects are misplaced. Your score: ${score}`;
        }
        document.getElementById("result").style.display = "block";
    }

    // Start the game immediately when the page loads
    startGame();
</script>

</body>
</html>
