<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simon Says Game</title>

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">

    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #D4EDDA;
            margin: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            padding: 15px;
        }

        .game-container {
            width: 100%;
            max-width: 720px;
            background: rgba(255, 255, 255, 0.7);
            border-radius: 20px;
            padding: 25px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
            backdrop-filter: blur(5px);
            text-align: center;
            border: 3px solid #4CAF50;
        }

        .btn-color {
            width: 100%;
            padding-top: 80%;
            position: relative;
            border: 3px solid #333;
            cursor: pointer;
            border-radius: 15px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
            transition: transform 0.3s ease, opacity 0.6s ease;
            max-height: 150px;
        }

        .btn-color:hover {
            transform: scale(1.05);
            box-shadow: 0 0 20px rgba(0,0,0,0.4);
        }

        .btn-color span {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-weight: bold;
            color: white;
            font-size: 1.2rem;
            user-select: none;
            text-shadow: 1px 1px 3px rgba(0,0,0,0.7);
        }

        .btn-container {
            display: none;
            margin-top: 30px;
            border-radius: 10px;
            padding: 10px;
        }

        .instructions {
            font-size: 20px;
            color: #084298;
            background: #CCE5FF;
            padding: 15px;
            border-radius: 10px;
            border: 2px solid #084298;
        }

        .instructions ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .instructions li::before {
            content: "✔️ ";
        }

        .scoreboard {
            font-size: 22px;
            margin-top: 20px;
            color: #155724;
            border: 2px solid #155724;
            padding: 10px;
            border-radius: 10px;
            background: #D4EDDA;
        }

        .game-over {
            font-size: 22px;
            font-weight: bold;
            color: red;
            margin-top: 30px;
            border: 2px solid red;
            padding: 10px;
            border-radius: 10px;
            background: #FFE2E2;
        }

        .wipe-out {
            opacity: 0.2;
            transition: opacity 0.5s ease;
        }

        @media (max-width: 768px) {
            .btn-color span {
                font-size: 1rem;
            }
            .instructions {
                font-size: 18px;
            }
        }

        @media (max-width: 576px) {
            .instructions {
                font-size: 16px;
            }
        }
    </style>
</head>
<body>
<div class="game-container">
    <h1 class="display-4 text-dark">Simon Says Game</h1>

    <div class="instructions" id="instructionText">
        <ul>
            <li>Watch the color sequence carefully.</li>
            <li>Repeat the sequence by clicking the buttons.</li>
            <li>Each level adds a new color to the pattern.</li>
            <li>Get as far as you can without making a mistake!</li>
        </ul>
        <p><strong>Click "Start" to begin!</strong></p>
    </div>

    <div id="alertPlaceholder"></div>

    <div class="d-flex justify-content-center flex-wrap gap-3 mt-4">
        <button class="btn btn-success" id="startBtn">Start Game</button>
        <button class="btn btn-danger" id="resetBtn" style="display:none;">Reset Game</button>
        <button class="btn btn-secondary" onclick="exitGame()">Exit</button>
    </div>

    <div class="container btn-container" id="colorButtons">
        <div class="row g-3 mt-4">
            <div class="col-6 col-md-6">
                <button id="red-btn" class="btn-color" style="background-color: red;">
                    <span>Red</span>
                </button>
            </div>
            <div class="col-6 col-md-6">
                <button id="blue-btn" class="btn-color" style="background-color: blue;">
                    <span>Blue</span>
                </button>
            </div>
            <div class="col-6 col-md-6">
                <button id="green-btn" class="btn-color" style="background-color: green;">
                    <span>Green</span>
                </button>
            </div>
            <div class="col-6 col-md-6">
                <button id="yellow-btn" class="btn-color" style="background-color: goldenrod;">
                    <span>Yellow</span>
                </button>
            </div>
        </div>
    </div>

    <div class="scoreboard">
        <h3>Score: <span id="score">0</span></h3>
    </div>

    <div id="gameOver" class="game-over" style="display:none;">
        Game Over! Your Final Score: <span id="finalScore"></span>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.min.js"></script>
<script>
    const startBtn = document.getElementById("startBtn");
    const resetBtn = document.getElementById("resetBtn");
    const scoreDisplay = document.getElementById("score");
    const gameOverDiv = document.getElementById("gameOver");
    const finalScoreDisplay = document.getElementById("finalScore");
    const colorButtonsContainer = document.getElementById("colorButtons");
    const instructionText = document.querySelector(".instructions");
    const alertPlaceholder = document.getElementById("alertPlaceholder");

    let score = 0;
    let sequence = [];
    let userSequence = [];
    let gameStarted = false;
    const colors = ['red', 'blue', 'green', 'yellow'];

    const colorButtons = {
        red: document.getElementById('red-btn'),
        blue: document.getElementById('blue-btn'),
        green: document.getElementById('green-btn'),
        yellow: document.getElementById('yellow-btn')
    };

    Object.keys(colorButtons).forEach(color => {
        colorButtons[color].addEventListener('click', () => {
            handleUserInput(color);
            wipeOutEffect(color);
        });
    });

    startBtn.addEventListener("click", function() {
        if (!gameStarted) startGame();
    });

    resetBtn.addEventListener("click", function() {
        location.reload();
    });

    function exitGame() {
        window.location.href = "/games";
    }

    function startGame() {
        gameStarted = true;
        startBtn.style.display = "none";
        resetBtn.style.display = "inline-block";
        colorButtonsContainer.style.display = "block";
        sequence = [];
        userSequence = [];
        score = 0;
        scoreDisplay.textContent = score;
        showInstructions("Get ready... Simon will show you a pattern!");
        setTimeout(nextSequence, 1500);
    }

    function nextSequence() {
        const randomColor = colors[Math.floor(Math.random() * colors.length)];
        sequence.push(randomColor);
        displaySequence(sequence);
        userSequence = [];
        setTimeout(() => {
            showInstructions("Simon says: Repeat the sequence!");
        }, 1000);
    }

    function showInstructions(text) {
        instructionText.innerHTML = `<p>${text}</p>`;
    }

    function displaySequence(sequence) {
        let index = 0;
        const interval = setInterval(() => {
            const color = sequence[index];
            flashColor(color);
            index++;
            if (index === sequence.length) {
                clearInterval(interval);
                showInstructions("Your turn! Press the colors in the same order.");
            }
        }, 1000);
    }

    function flashColor(color) {
        colorButtons[color].classList.add("wipe-out");
        setTimeout(() => {
            colorButtons[color].classList.remove("wipe-out");
        }, 500);
    }

    function wipeOutEffect(color) {
        colorButtons[color].classList.add("wipe-out");
        setTimeout(() => {
            colorButtons[color].classList.remove("wipe-out");
        }, 500);
    }

    function handleUserInput(color) {
        userSequence.push(color);
        checkUserSequence();
    }

    function checkUserSequence() {
        const currentIndex = userSequence.length - 1;
        if (userSequence[currentIndex] !== sequence[currentIndex]) {
            gameOver();
            return;
        }
        if (userSequence.length === sequence.length) {
            score++;
            scoreDisplay.textContent = score;
            showAlert("Point scored!", "success");
            setTimeout(nextSequence, 1000);
        }
    }

    function gameOver() {
        finalScoreDisplay.textContent = score;
        gameOverDiv.style.display = "block";
        showInstructions("Game Over! Click Reset to try again.");
        showAlert("Game Over! Wrong sequence.", "danger");
    }

    function showAlert(message, type) {
        alertPlaceholder.innerHTML = `<div class="alert alert-${type} alert-dismissible fade show" role="alert">${message}<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button></div>`;
    }
</script>
</body>
</html>